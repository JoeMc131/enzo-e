#======================================================================
#
#  File        : initial-music.in
#  Author      : James Bordner (jobordner@ucsd.edu)
#  Date        : 2017-06-23
#  Brief       : Test file for reading MUSIC HDF5 initial conditions
#
#  Description : Solves a small cosmology problem using initial
#                conditions from the MUSIC HDF5 initial conditions
#                generator
#
#======================================================================


# The domain is (x,y) such that 0 < x,y < 1

  Domain {
     lower = [0.0, 0.0, 0.0];
     upper = [1.0, 1.0, 1.0];
  }

# The root-level mesh 32x32x32

  Mesh {
    root_rank = 3;
    root_size = [32,32,32];
    root_blocks = [4,4,4];
  }

# Refine by (relative) slope of density

  Adapt {
     max_level = 0;
     list = ["SLOPE"];
     SLOPE {
        type = "slope";
        field_list = ["density"];
        min_refine  = 5.0;
        max_coarsen = 2.0;
     }
  }

# The simulation stops after 10 cycles

  Stopping { cycle = 10;   }

# There are fields for density, velocity, total and internal
# energy, and pressure.  All fields have a ghost zone depth of 4

  Field {

     ghost_depth = 4;

     list = [
  	"density",	
  	"velocity_x",
  	"velocity_y",
  	"velocity_z",
  	"total_energy",
  	"internal_energy",
  	"pressure"
     ] ;

     gamma = 1.4;

     padding   = 0;
     alignment = 8;
  }

  Particle {
     list = [ "dark" ];
     dark {
     	  attributes = ["position_x",      "double",
	                "position_y",      "double",
                        "position_z",      "double" ];
     	  attributes += ["velocity_x",     "double",
                         "velocity_y",     "double",
                         "velocity_z",     "double" ];
      }
  }

# The computational method used is PPM hydrodynamics

  Method {
     list = ["ppm"];

     ppm {
        courant   = 0.8;
        diffusion   = true;
        flattening  = 3;
        steepening  = true;
        dual_energy = false;
    }
  }

# Initial conditions as described in the header comment

  Initial {

     list = ["hdf5"];

     hdf5 {

        file_list = ["FD","FVX","FVY","FVZ",
		     "PX","PY","PZ",
	             "PVX","PVY","PVZ" ];

        FD {
	   type = "field";
	   name = "density";
	   coords    = ".zyx";
	   file      = "GridDensity";
	   dataset   = "GridDensity";
	}
        FVX {
	   type = "field";
	   name = "velocity_x";
	   coords    = ".zyx";
	   file      = "GridVelocities_x";
	   dataset   = "GridVelocities_x";
	}
        FVY {
	   type = "field";
	   name = "velocity_y";
	   coords    = ".zyx";
	   file      = "GridVelocities_y";
	   dataset   = "GridVelocities_y";
	}
        FVZ {
	   type = "field";
	   name = "velocity_z";
	   coords    = ".zyx";
	   file      = "GridVelocities_z";
	   dataset   = "GridVelocities_z";
	}
	
        PX {
	   type      = "particle";
	   name      = "dark";
	   coords    = ".zyx";
	   attribute = "position_x";
	   file      = "ParticleDisplacements_x";
	   dataset   = "ParticleDisplacements_x";
	}
        PY {
	   type      = "particle";
	   name      = "dark";
	   coords    = ".zyx";
	   attribute = "position_y";
	   file      = "ParticleDisplacements_y";
	   dataset   = "ParticleDisplacements_y";
	}
        PZ {
	   type      = "particle";
	   name      = "dark";
	   coords    = ".zyx";
	   attribute = "position_z";
	   file      = "ParticleDisplacements_z";
	   dataset   = "ParticleDisplacements_z";
	}
        PVX {
	   type      = "particle";
	   name      = "dark";
	   coords    = ".zyx";
	   attribute = "position_x";
	   file      = "ParticleVelocities_x";
	   dataset   = "ParticleVelocities_x";
	}
        PVY {
	   type      = "particle";
	   name      = "dark";
	   coords    = ".zyx";
	   attribute = "position_y";
	   file      = "ParticleVelocities_y";
	   dataset   = "ParticleVelocities_y";
	}
        PVZ {
	   type      = "particle";
	   name      = "dark";
	   coords    = ".zyx";
	   attribute = "position_z";
	   file      = "ParticleVelocities_z";
	   dataset   = "ParticleVelocities_z";
	}
     }	  
  }

# Periodic boundary conditions

  Boundary {

     type = "periodic";

  }

# Output data and image files

  Output {

    list = ["de"];

    de {
       type = "image";
       name = ["de-%02d.png","count"];
       image_type = "data";
       field_list = ["density"];
       image_size = [ 256,256];
       schedule { var =  "cycle"; step = 1;  }
    }
  
  }


