# Problem VLCT test problems
# Author: Matthew Abruzzo (matthewabruzzo@gmail.com)

   Boundary {
      type = "periodic";
   }

   Method {
      list = ["mhd_vlct"];
      mhd_vlct{
         courant = 0.4;
  
        # default is hlle. Options are hlle/enzo_hlle, athena_hlle, and hlld
        riemann_solver = "hlld";

        # Reconstructor algorithm for half time step. Options are:
        #    - "nn" Nearest Neighbor (default)
        #    - "plm" Piecewise linear
        half_dt_reconstruct_method = "nn";

        # Reconstructor algorithm for full time step. Options are:
        #    - "nn" Nearest Neighbor
        #    - "plm" Piecewise linear (default)
        # Do NOT choose "plm" for both
        full_dt_reconstruct_method = "plm";

        # density floor (default = 0.0)
        density_floor = 1.e-200;

        # pressure floor (default = 0.0)
        pressure_floor = 1.e-200;
	};
   }

   Field {
      # The VL+CT method uses the following fields:
      #    - velocity_x/y/z
      #    - (specific) total_energy
      #    - pressure (this is a field used to temporarily write data)
      #    - bfieldi_x/y/z are interface magnetic fields (aka longitudinal).
      #      The x/y/z component is the only component tracked at the faces
      #      between cells along the x/y/z component
      #    - bfieldc_x/y/z are the cell-centered magenetic fields. Each
      #      component is the average value of the corresponding interface
      #      values
      #    - it uses (specific) internal_energy to hold temporary values. (If
      #      this field is not allocated then a temporary field will be
      #      allocated)
      # Pressure and velocity_x/y/z are also tracked because they are frequently
      # computed.
      list = ["density",
              "velocity_x", "velocity_y", "velocity_z",
	      "total_energy",
	      "bfieldi_x", "bfieldi_y", "bfieldi_z",
	      "bfield_x", "bfield_y", "bfield_z",
	      "pressure"];

      courant_=0.4;
      gamma = 1.6666666666666667;

      # The VL+CT method reconstructs interface values (to compute fluxes) twice
      # per timestep. Can perform nearest-neighbor or PLM. Each time
      # nearest-neighbor is used, 1 ghost zone is needed. Each time PLM is used
      # 2 ghost zones are needed. Presently use PLM twice, but in future, will
      # use nearest-neighbor followed by PLM
      
      ghost_depth = 3;
      padding = 0;
      alignment = 8;

      bfieldi_x{
         centering = [false, true, true];
      };
      bfieldi_y{
         centering = [true, false, true];
      };
      bfieldi_z{
         centering = [true, true, false];
      };
   }

   Output {
      list = ["data"];
      data {
	 type = "data";
	 field_list = ["density", "velocity_x", "velocity_y", "velocity_z",
		       "total_energy", "bfield_x", "bfield_y", "bfield_z"];
      };
   }