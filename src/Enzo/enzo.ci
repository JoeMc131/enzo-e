// See LICENSE_CELLO file for license and copyright information

/// @file     enzo.ci
/// @author   James Bordner (jobordner@ucsd.edu)
/// @date     2011-03-24
/// @brief    CHARM++ Enzo process group

module enzo {

  readonly int EnzoBlock::UseMinimumPressureSupport[MAX_NODE_SIZE];
  readonly enzo_float EnzoBlock::MinimumPressureSupportParameter[MAX_NODE_SIZE];
  readonly enzo_float EnzoBlock::ComovingBoxSize[MAX_NODE_SIZE];
  readonly enzo_float EnzoBlock::HubbleConstantNow[MAX_NODE_SIZE];
  readonly enzo_float EnzoBlock::OmegaMatterNow[MAX_NODE_SIZE];
  readonly enzo_float EnzoBlock::OmegaLambdaNow[MAX_NODE_SIZE];
  readonly enzo_float EnzoBlock::MaxExpansionRate[MAX_NODE_SIZE];
  readonly int EnzoBlock::MultiSpecies[MAX_NODE_SIZE];
  readonly int EnzoBlock::PressureFree[MAX_NODE_SIZE];
  readonly enzo_float EnzoBlock::Gamma[MAX_NODE_SIZE];
  readonly enzo_float EnzoBlock::GravitationalConstant[MAX_NODE_SIZE];
  readonly int EnzoBlock::ProblemType[MAX_NODE_SIZE];
  readonly int EnzoBlock::PPMFlatteningParameter[MAX_NODE_SIZE];
  readonly int EnzoBlock::PPMDiffusionParameter[MAX_NODE_SIZE];
  readonly int EnzoBlock::PPMSteepeningParameter[MAX_NODE_SIZE];
  readonly int EnzoBlock::DualEnergyFormalism[MAX_NODE_SIZE];
  readonly enzo_float EnzoBlock::DualEnergyFormalismEta1[MAX_NODE_SIZE];
  readonly enzo_float EnzoBlock::DualEnergyFormalismEta2[MAX_NODE_SIZE];
  readonly enzo_float EnzoBlock::pressure_floor[MAX_NODE_SIZE];
  readonly enzo_float EnzoBlock::density_floor[MAX_NODE_SIZE];
  readonly enzo_float EnzoBlock::number_density_floor[MAX_NODE_SIZE];
  readonly enzo_float EnzoBlock::temperature_floor[MAX_NODE_SIZE];
  readonly enzo_float EnzoBlock::InitialRedshift[MAX_NODE_SIZE];
  readonly enzo_float EnzoBlock::InitialTimeInCodeUnits[MAX_NODE_SIZE];
  readonly enzo_float EnzoBlock::DomainLeftEdge [MAX_NODE_SIZE_3];
  readonly enzo_float EnzoBlock::DomainRightEdge[MAX_NODE_SIZE_3];
  readonly int EnzoBlock::GridRank[MAX_NODE_SIZE];
  readonly int EnzoBlock::ghost_depth[MAX_NODE_SIZE_3];
  readonly int EnzoBlock::NumberOfBaryonFields[MAX_NODE_SIZE];      // active baryon fields

  //==================================================
  // WARNING: Enable the following two lines iff use_grackle = 1
  // in top-level SConstruct file
  // ==================================================

#ifdef CONFIG_USE_GRACKLE
  PUPable EnzoInitialGrackleTest;
  PUPable EnzoMethodGrackle;
#endif

  PUPable EnzoBoundary;
  PUPable EnzoConfig;
  PUPable EnzoFactory;

  PUPable EnzoInitialImplosion2;
  PUPable EnzoInitialSedovArray2;
  PUPable EnzoInitialSedovArray3;
  PUPable EnzoInitialTurbulence;

  PUPable EnzoRefineShock;

  PUPable EnzoComputePressure;
  PUPable EnzoComputeTemperature;
  PUPable EnzoComputeAcceleration;
  PUPable EnzoComputeSmoothJacobi;

  PUPable EnzoMatrixLaplace;
  PUPable EnzoMatrixDiagonal;
  PUPable EnzoMatrixIdentity;

  PUPable EnzoMethodHeat;
  PUPable EnzoMethodNull;
  PUPable EnzoMethodPpm;
  PUPable EnzoMethodPpml;
  PUPable EnzoMethodTurbulence;
  PUPable EnzoMethodGravityCg;
  PUPable EnzoMethodGravityMlat;
  PUPable EnzoMethodGravityMg0;
  PUPable EnzoMethodGravityBiCGStab;

  PUPable EnzoProblem;
  PUPable EnzoProlong;
  PUPable EnzoProlongMC1;
  PUPable EnzoProlongPoisson;

  PUPable EnzoRestrict;

  extern module mesh;

  readonly CProxy_EnzoSimulation proxy_enzo_simulation;

  group [migratable] EnzoSimulation : Simulation {

    entry EnzoSimulation (const char filename[n], int n, int node_size);

    entry void r_startup_begun (CkReductionMsg *);
    entry void r_startup_finished (CkReductionMsg *);
    entry void p_read_parameters();
    entry void r_write_checkpoint ();
  }

  array[Index] EnzoBlock : Block {

    entry EnzoBlock (MsgRefine * mesg);

    entry EnzoBlock (Index index,
       int nx, int ny, int nz,	
       int num_field_blocks,
       int count_adapt,
       int cycle, double time, double dt,
       int n, char arr[n], int op_array,
       int num_face_level, int face_level[num_face_level],
       bool testing);     

    entry EnzoBlock();

    // EnzoMethodTurbulence synchronization entry methods
    entry void p_method_turbulence_end(CkReductionMsg *msg);

    // EnzoMethodGravityCg synchronization entry methods
    template <class T>
    entry void r_cg_loop_0a(CkReductionMsg *msg);
    template <class T>
    entry void r_cg_loop_0b(CkReductionMsg *msg);
    template <class T>
    entry void r_cg_loop_1(CkReductionMsg *msg);
    template <class T>
    entry void r_cg_shift_1(CkReductionMsg *msg);
    template <class T>
    entry void r_cg_loop_3(CkReductionMsg *msg);
    template <class T>
    entry void r_cg_loop_5(CkReductionMsg *msg);

    // EnzoMethodGravityBiCGStab post-reduction entry methods
    template <class T>
    entry void r_gravity_bicgstab_start_1(CkReductionMsg *msg);
    template <class T>
    entry void r_gravity_bicgstab_start_3(CkReductionMsg *msg);
    template <class T>
    entry void r_gravity_bicgstab_loop_5(CkReductionMsg *msg);
    template <class T>
    entry void r_gravity_bicgstab_loop_11(CkReductionMsg *msg);
    template <class T>
    entry void r_gravity_bicgstab_loop_13(CkReductionMsg *msg);
    template <class T>
    entry void r_gravity_bicgstab_loop_15(CkReductionMsg *msg);

    // EnzoMethodGravityBiCGStab post-refresh entry methods
    entry void p_gravity_bicgstab_loop_1();
    entry void p_gravity_bicgstab_loop_3();
    entry void p_gravity_bicgstab_loop_7();
    entry void p_gravity_bicgstab_loop_9();
    entry void p_gravity_bicgstab_acc();
    entry void p_gravity_bicgstab_exit();

    entry void p_mg_receive_face
    (int n, char buffer[n],
     int type_refresh,
     int if3[3], int ic3[3],int count = 0);

    template <class T>
    entry void p_mg0_pre_smooth(CkReductionMsg *msg);
    template <class T>
    entry void p_mg0_restrict_send(CkReductionMsg *msg);
    template <class T>
    entry void p_mg0_restrict_recv(FieldMsg * msg);
    template <class T>
    entry void p_mg0_prolong_recv(FieldMsg * msg);
    template <class T>
    entry void p_mg0_post_smooth(CkReductionMsg *msg);

    entry void p_enzo_matvec();
    entry void r_enzo_matvec(CkReductionMsg *);

  };

  // array[Index] EnzoArrayMethodGravityCg {
  //   entry EnzoArrayMethodGravityCg();
  //   template <class T>
  //   entry void r_cg_loop_0(CkReductionMsg *msg);
  //   template <class T>
  //   entry void r_cg_loop_1(CkReductionMsg *msg);
  //   template <class T>
  //   entry void r_cg_loop_3(CkReductionMsg *msg);
  //   template <class T>
  //   entry void r_cg_loop_5(CkReductionMsg *msg);
  // }

  // array[Index] EnzoArrayMethodGravityBiCGStab {
  //   entry EnzoArrayMethodGravityBiCGStab();
  //   template <class T>
  //   entry void r_gravity_bicgstab_start_1(CkReductionMsg *msg);
  //   template <class T>
  //   entry void r_gravity_bicgstab_start_3(CkReductionMsg *msg);
  //   template <class T>
  //   entry void r_gravity_bicgstab_loop_1(CkReductionMsg *msg);
  //   template <class T>
  //   entry void r_gravity_bicgstab_loop_3(CkReductionMsg *msg);
  //   template <class T>
  //   entry void r_gravity_bicgstab_loop_5(CkReductionMsg *msg);
  //   template <class T>
  //   entry void r_gravity_bicgstab_loop_7(CkReductionMsg *msg);
  //   template <class T>
  //   entry void r_gravity_bicgstab_loop_9(CkReductionMsg *msg);
  //   template <class T>
  //   entry void r_gravity_bicgstab_loop_11(CkReductionMsg *msg);
  //   template <class T>
  //   entry void r_gravity_bicgstab_loop_13(CkReductionMsg *msg);
  //   template <class T>
  //   entry void r_gravity_bicgstab_loop_15(CkReductionMsg *msg);
  // }

};

module template_defs {
   extern module enzo;

   extern entry void EnzoBlock r_cg_loop_0a<float>(CkReductionMsg *msg);
   extern entry void EnzoBlock r_cg_loop_0a<double>(CkReductionMsg *msg);
   extern entry void EnzoBlock r_cg_loop_0a<long double>(CkReductionMsg *msg);

   extern entry void EnzoBlock r_cg_loop_0b<float>(CkReductionMsg *msg);
   extern entry void EnzoBlock r_cg_loop_0b<double>(CkReductionMsg *msg);
   extern entry void EnzoBlock r_cg_loop_0b<long double>(CkReductionMsg *msg);

   extern entry void EnzoBlock r_cg_loop_1<float>(CkReductionMsg *msg);
   extern entry void EnzoBlock r_cg_loop_1<double>(CkReductionMsg *msg);
   extern entry void EnzoBlock r_cg_loop_1<long double>(CkReductionMsg *msg);

   extern entry void EnzoBlock r_cg_loop_3<float>(CkReductionMsg *msg);
   extern entry void EnzoBlock r_cg_loop_3<double>(CkReductionMsg *msg);
   extern entry void EnzoBlock r_cg_loop_3<long double>(CkReductionMsg *msg);

   extern entry void EnzoBlock r_cg_loop_5<float>(CkReductionMsg *msg);
   extern entry void EnzoBlock r_cg_loop_5<double>(CkReductionMsg *msg);
   extern entry void EnzoBlock r_cg_loop_5<long double>(CkReductionMsg *msg);

   extern entry void EnzoBlock r_gravity_bicgstab_start_1<float>(CkReductionMsg *msg);
   extern entry void EnzoBlock r_gravity_bicgstab_start_1<double>(CkReductionMsg *msg);
   extern entry void EnzoBlock r_gravity_bicgstab_start_1<long double>(CkReductionMsg *msg);

   extern entry void EnzoBlock r_gravity_bicgstab_start_3<float>(CkReductionMsg *msg);
   extern entry void EnzoBlock r_gravity_bicgstab_start_3<double>(CkReductionMsg *msg);
   extern entry void EnzoBlock r_gravity_bicgstab_start_3<long double>(CkReductionMsg *msg);

   extern entry void EnzoBlock r_gravity_bicgstab_loop_1<float>(CkReductionMsg *msg);
   extern entry void EnzoBlock r_gravity_bicgstab_loop_1<double>(CkReductionMsg *msg);
   extern entry void EnzoBlock r_gravity_bicgstab_loop_1<long double>(CkReductionMsg *msg);

   extern entry void EnzoBlock r_gravity_bicgstab_loop_3<float>(CkReductionMsg *msg);
   extern entry void EnzoBlock r_gravity_bicgstab_loop_3<double>(CkReductionMsg *msg);
   extern entry void EnzoBlock r_gravity_bicgstab_loop_3<long double>(CkReductionMsg *msg);

   extern entry void EnzoBlock r_gravity_bicgstab_loop_5<float>(CkReductionMsg *msg);
   extern entry void EnzoBlock r_gravity_bicgstab_loop_5<double>(CkReductionMsg *msg);
   extern entry void EnzoBlock r_gravity_bicgstab_loop_5<long double>(CkReductionMsg *msg);

   extern entry void EnzoBlock r_gravity_bicgstab_loop_7<float>(CkReductionMsg *msg);
   extern entry void EnzoBlock r_gravity_bicgstab_loop_7<double>(CkReductionMsg *msg);
   extern entry void EnzoBlock r_gravity_bicgstab_loop_7<long double>(CkReductionMsg *msg);

   extern entry void EnzoBlock r_gravity_bicgstab_loop_11<float>(CkReductionMsg *msg);
   extern entry void EnzoBlock r_gravity_bicgstab_loop_11<double>(CkReductionMsg *msg);
   extern entry void EnzoBlock r_gravity_bicgstab_loop_11<long double>(CkReductionMsg *msg);

   extern entry void EnzoBlock r_gravity_bicgstab_loop_13<float>(CkReductionMsg *msg);
   extern entry void EnzoBlock r_gravity_bicgstab_loop_13<double>(CkReductionMsg *msg);
   extern entry void EnzoBlock r_gravity_bicgstab_loop_13<long double>(CkReductionMsg *msg);

   extern entry void EnzoBlock r_gravity_bicgstab_loop_15<float>(CkReductionMsg *msg);
   extern entry void EnzoBlock r_gravity_bicgstab_loop_15<double>(CkReductionMsg *msg);
   extern entry void EnzoBlock r_gravity_bicgstab_loop_15<long double>(CkReductionMsg *msg);

   extern entry void EnzoBlock p_gravity_bicgstab_acc<float>();
   extern entry void EnzoBlock p_gravity_bicgstab_acc<double>();
   extern entry void EnzoBlock p_gravity_bicgstab_acc<long double>();

   extern entry void EnzoBlock p_gravity_bicgstab_exit<float>();
   extern entry void EnzoBlock p_gravity_bicgstab_exit<double>();
   extern entry void EnzoBlock p_gravity_bicgstab_exit<long double>();

   extern entry void EnzoBlock p_mg0_pre_smooth<float>(CkReductionMsg *msg);
   extern entry void EnzoBlock p_mg0_pre_smooth<double>(CkReductionMsg *msg);
   extern entry void EnzoBlock p_mg0_pre_smooth<long double>(CkReductionMsg *msg);

   extern entry void EnzoBlock p_mg0_restrict_send<float>();
   extern entry void EnzoBlock p_mg0_restrict_send<double>();
   extern entry void EnzoBlock p_mg0_restrict_send<long double>();

   extern entry void EnzoBlock p_mg0_restrict_recv<float>();
   extern entry void EnzoBlock p_mg0_restrict_recv<double>();
   extern entry void EnzoBlock p_mg0_restrict_recv<long double>();

   extern entry void EnzoBlock p_mg0_prolong_recv<float>();
   extern entry void EnzoBlock p_mg0_prolong_recv<double>();
   extern entry void EnzoBlock p_mg0_prolong_recv<long double>();

   extern entry void EnzoBlock p_mg0_post_smooth<float>();
   extern entry void EnzoBlock p_mg0_post_smooth<double>();
   extern entry void EnzoBlock p_mg0_post_smooth<long double>();

};
