Import('env')
Import('parallel_run')
Import('serial_run')
Import('ip_charm')

Import('bin_path')
Import('test_path')

Import('use_valgrind')
Import('use_grackle')
Import('prec')

import os, os.path

#----------------------------------------------------------
#defines
#----------------------------------------------------------

env['CPIN'] = 'touch parameters.out; mv parameters.out ${TARGET}.in'
env['RMIN'] = 'rm -f parameters.out'
env['clocal_cmd'] = '++local'

date_cmd = 'echo $TARGET > test/STATUS; echo "---------------------"; date +"%Y-%m-%d %H:%M:%S";'


grackle_data_dir = os.getenv('GRACKLE_INPUT_DATA_DIR', '')

def _full_path_to_node(node):
    return os.path.abspath(os.path.join(os.getcwd(), str(node[0])))

if grackle_data_dir != '' and use_grackle:
    # first, prepare the builder that constructs the modified Grackle input file
    # (so that the file includes a correct path to the data file)
    _script_path = os.path.abspath(
        os.path.join(os.getcwd(), '../../tools/gen_grackle_testing_file.py')
    )
    _cmd = (
        "python {_script_path} $SOURCE "
        "       -d {grackle_data_dir}/CloudyData_UVB=HM2012_shielded.h5 "
        "       --use-abs-paths "
        "       -o $TARGET"
    ).format(_script_path = _script_path, grackle_data_dir = grackle_data_dir)
    make_grackle_input = Builder(action = _cmd)


    # now prepare the builder that executes tools/field_summary.py (the script
    # actually performs the test)
    _script_path = os.path.abspath(
        os.path.join(os.getcwd(), '../../tools/field_summary.py')
    )
    _cmd = (
        "rm --force $TARGET; "
        "python {_script_path} cmp $SOURCE "
        "       --ref $REF_TABLE "
        "       --report $TARGET "
        "       --rtol $RTOL --atol $ATOL "
        "       > $LOG_FILE"
    ).format(_script_path = _script_path)

    compare_field_summary = Builder(
        action = _cmd + "; awk '{ print \"    \", $0 }' $TARGET"
    )

    # now add these builders to the environment and clone the environment
    env.Append(BUILDERS = {'MakeGrackleInput' : make_grackle_input,
                           'CompareFieldSummary' : compare_field_summary})

#-------------------------------------------------------------
#load balancing
#-------------------------------------------------------------

if grackle_data_dir != '' and use_grackle:
    # method_grackle_cooling_dt.unit
    # ===========================
    # (This test uses the cooling time to set the timestep and just checks the
    # final time after a fixed number of cycles)

    # Part 1 of 2: Construct the input file (with the correct path to the
    # grackle file)
    input_grackle_cooling_dt = env.MakeGrackleInput(
        target = "temp_method_grackle_cooling_dt.in",
        source = "../../input/Grackle/method_grackle_cooling_dt.in"
        # source file must be relative to this SConscript file's location
    )
    Clean(input_grackle_cooling_dt,
          _full_path_to_node(input_grackle_cooling_dt))


    # Part 2 of 2: Run Enzo-E
    grackle_cooling_dt = env.RunParallel(
        "grackle_cooling_dt.unit",
        bin_path + '/enzo-e',
        ARGS = _full_path_to_node(input_grackle_cooling_dt),
        COPY = '' # no data outputs to copy/move
    )
    # there's no data outputs to cleanup

    # the following is required so that the intermediate input file will be
    # generated when running this test
    Depends(grackle_cooling_dt, input_grackle_cooling_dt)



    # method_grackle_general.unit
    # ===========================
    # This test compares summary statisitics for a selection of fields to
    # previously tabulated values.

    # Part 1 of 3: Write an input file with a valid path to a Grackle data file
    input_grackle_general = env.MakeGrackleInput(
        target = "temp_method_grackle_general.in",
        source = "../../input/Grackle/method_grackle_general.in"
        # source file must be relative to this SConscript file's location
    )
    Clean(input_grackle_general, _full_path_to_node(input_grackle_general))


    # Part 2 of 3: Run Enzo-E
    grackle_general_simulation = env.RunParallel(
        "grackle_general_simulation.log",
        bin_path + '/enzo-e',
        ARGS = _full_path_to_node(input_grackle_general),
        COPY = ('rm -rf ' + test_path + '/MethodGrackle/GeneralGrackle-*; ' +
                'mv `ls -d GeneralGrackle-*` ' + test_path + '/MethodGrackle/')
    )
    _blocklist_fname = 'GeneralGrackle-500.00/GeneralGrackle-500.00.block_list'
    SideEffect(
        '#/' + test_path + '/MethodGrackle/' + _blocklist_fname,
        "grackle_general_simulation.log"
    )
    Clean(grackle_cooling_dt,
          [Glob('#/' + test_path + '/MethodGrackle/GrackleGeneral-*'),
           _full_path_to_node(grackle_general_simulation)]
    )
    Depends(grackle_general_simulation, input_grackle_general)


    # Part 3 of 3: Measure the field summary statistics and compare against
    # a table of reference values
    _dict_to_json_cmd_arg = lambda d: "'" + str(d).replace('\'', '"') + "'"
    if prec == 'double':
        _ref_tab = test_path + '/MethodGrackle/ref_general_grackle-double.csv'
        atol = 0
        # these should be flexible for different compiler versions
        rtol = _dict_to_json_cmd_arg({"min" : 5e-15, "max" : 5e-6,
                                      "mean" : 5e-8,
                                      "standard_deviation" : 5e-8})
    else:
        _ref_tab = test_path + '/MethodGrackle/ref_general_grackle-single.csv'
        atol = 0
        # the following may need to be relaxed for different compiler versions
        rtol = _dict_to_json_cmd_arg(
            dict((k, 1e-7) for k in ["min","max","mean","standard_deviation"])
        )

    _compare_log_path = test_path + '/MethodGrackle/grackle_general_cmp.log'
    general_grackle = env.CompareFieldSummary(
        target = 'grackle_general.unit',
        source = _blocklist_fname,
        REF_TABLE = _ref_tab,
        ATOL = atol,
        RTOL = rtol,
        LOG_FILE = _compare_log_path
    )
    Depends(general_grackle, grackle_general_simulation)
    Clean(grackle_cooling_dt, _compare_log_path)

    # To update the reference values used in this test, execute the following
    # commands from the root directory:
    #   $ ./build.sh test/MethodGrackle/grackle_general_simulation.log
    #   $ python tools/field_summary.py measure -f pressure,temperature,cooling_time test/MethodGrackle/GeneralGrackle-500.00/GeneralGrackle-500.00.block_list -o test/MethodGrackle/ref_general_grackle-double.csv
