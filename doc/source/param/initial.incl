----

:Parameter:  :p:`Initial` : :p:`cycle`
:Summary: :s:`Initial cycle number`
:Type:    :t:`list` ( :t:`integer` )
:Default: :d:`0`
:Scope:     :c:`Cello`

:e:`Initial value for the cycle number.`

----

:Parameter:  :p:`Initial` : :p:`time`
:Summary: :s:`Initial time`
:Type:    :t:`float`
:Default: :d:`0.0`
:Scope:     :c:`Cello`

:e:`Initial time in code units.`

value
-----

:Parameter:  :p:`Initial` : :p:`value` : :p:`<field>` :
:Summary: :s:`Initialize field values`
:Type:    :t:`list` ( :t:`float-expr`, [ :t:`logical-expr`, :t:`float-expr`, [ ... ] ] )
:Default: :d:`[]`
:Scope:     Cello

:e:`This initialization approach allows initializing field values directly.  The first element of the list must be a` :t:`float` :e:`expression, and may include arithmetic operators, variables "x", "y", "z", and most functions in the POSIX math library /include/math.h.  The second optional list element is a logical expression, and  serves as a "mask" of the domain.  The third` :t:`float` :e:`expression parameter is required if a mask is supplied, and serves as the "else" case.  Multiple such mask-value pairs may be used.  For example:`

::

   Initial {

      list = ["value"];

      value {
         density = [ sin ( x + y ), x - y < 0.0, 1.0 ];
      }
   }
     
	       
:e:`is read as "Set the density field equal to` :p:`sin ( x + y )` :e:`wherever` :p:`x - y < 0.0` :e:`, otherwise set to` :p:`1.0` :e:`".`

cloud
-----

The :p:`cloud` Initial subgroup is used to setup a Spherical cloud embedded in
a hot wind. The cloud and wind are assumed to be in pressure equilibrium with one another.

Currently magnetic fields are not initialized by this method. Currently, the
cell-centered values should be initialized by another Initial subgroup (e.g.
value) prior to call of this subgroup. If magnetic fields are initialized, they
must be constant across the entire domain.

:Parameter:  :p:`Initial` : :p:`cloud` : :p:`subsample_n`
:Summary: :s:`Determines the subsampling resolution`
:Type:    :t:`integer`
:Default: :d:`0`
:Scope:   Enzo

:e:`Subsampling is used to initialize the fields in regions of overlap
between the cloud and the wind. For cells in this region, the fraction
of the volume enclosed by the cloud is estimated by subdividing a cell
into` :math:`2^n` :e:`subcells along each axis (a value of 0,
corresponds to no subsampling. The average density of the cells in
this region are volume weighted and the average velocities are mass
weighted. The total energy in a cell is currently computed by assuming
constant internal energy density throughout the grid and using the
average velocities and densities (and, if applicable, the magnetic
fields).`

----

:Parameter:  :p:`Initial` : :p:`cloud` : :p:`cloud_radius`
:Summary: :s:`Initial radius of the spherical cloud`
:Type:    :t:`float`
:Default: :d:`none`
:Scope:   Enzo

:e:`This must be a positive value.`

----

:Parameter:  :p:`Initial` : :p:`cloud` : :p:`cloud_center_x`
:Summary: :s:`x coordinate of the cloud center`
:Type:    :t:`float`
:Default: :d:`0.0`
:Scope:   Enzo

----

:Parameter:  :p:`Initial` : :p:`cloud` : :p:`cloud_center_y`
:Summary: :s:`y coordinate of the cloud center`
:Type:    :t:`float`
:Default: :d:`0.0`
:Scope:   Enzo

----

:Parameter:  :p:`Initial` : :p:`cloud` : :p:`cloud_center_z`
:Summary: :s:`z coordinate of the cloud center`
:Type:    :t:`float`
:Default: :d:`0.0`
:Scope:   Enzo

----

:Parameter:  :p:`Initial` : :p:`cloud` : :p:`cloud_density`
:Summary: :s:`initial mass density of the cloud`
:Type:    :t:`float`
:Default: :d:`none`
:Scope:   Enzo

:e:`This must be a positive value.`

----

:Parameter:  :p:`Initial` : :p:`cloud` : :p:`wind_density`
:Summary: :s:`initial mass density of the wind`
:Type:    :t:`float`
:Default: :d:`none`
:Scope:   Enzo

:e:`This must be a positive value.`

----

:Parameter:  :p:`Initial` : :p:`cloud` : :p:`wind_velocity`
:Summary: :s:`initial velocity of the wind along the x-axis`
:Type:    :t:`float`
:Default: :d:`0.0`
:Scope:   Enzo

----

:Parameter:  :p:`Initial` : :p:`cloud` : :p:`wind_total_energy`
:Summary: :s:`initial specific total energy of the wind`
:Type:    :t:`float`
:Default: :d:`none`
:Scope:   Enzo

:e:`This must be a positive value.`

----

:Parameter:  :p:`Initial` : :p:`cloud` : :p:`wind_internal_energy`
:Summary: :s:`initial specific internal energy of the wind`
:Type:    :t:`float`
:Default: :d:`0`
:Scope:   Enzo

:e:`If the` ``"internal_energy"`` :e:`field is defined, then this must
be a positive value. In this case, the value is also used to help
initialize the` ``"total_energy"`` :e:`field for cells that overlap
with the cloud.  However, if the` ``"internal_energy"`` :e:`field is
not defined, then this must not have a specified value (i.e. it must
have a value of 0).`

inclined_wave
-------------

The :p:`inclined_wave` Initial subgroup is used to setup a MHD wave
at an angle inclined to the simulation domain for testing the VL
+ CT MHD integration method. This method can also be used for setting
up an inclined sound wave (the magnetic fields are all set to zero).

The procedure to addopted from
`Gardiner & Stone (2008) <http://adsabs.harvard.edu/abs/2008JCoPh.227.4123G>`_ .
Specifically, a coordinate system "x0", "x1", "x2" is defined and the
wave is initialized to travel along "x0". The transformation between
"x", "y", "z" and "x0", "x1", "x2", is determined by the values of the
:p:`alpha` and :p:`beta` parameters. They are explicitly related by

.. math::

   x &= x_0\cos\alpha\cos\beta - x_1\sin\beta - x_2\sin \alpha \cos \beta \\
   y &= x_0\cos\alpha\sin\beta + x_1\cos\beta - x_2\sin \alpha \sin \beta \\
   z &= x_0\sin\alpha + x_2 \cos\alpha

As in that paper, we initialize the magnetic fields using the vector
potential to ensure that the magnetic fields are divergence-free.

*This could be easily extended to setup other hydrodynamical waves and
could be generalized to initialize fields for hydrodynamic methods
(without magnetic fields) or MHD methods without face-centered B-fields*

:Parameter:  :p:`Initial` : :p:`inclined_wave` : :p:`alpha`
:Summary: :s:`Angle used to help determine wave inclination`
:Type:    :t:`float`
:Default: :d:`0`
:Scope:   :z:`Enzo`

:e:`The angle is assumed to have units of radians.`

----

:Parameter:  :p:`Initial` : :p:`inclined_wave` : :p:`beta`
:Summary: :s:`Angle used to help determine wave inclination`
:Type:    :t:`float`
:Default: :d:`0`
:Scope:   :z:`Enzo`

:e:`The angle is assumed to have units of radians.`

----

:Parameter:  :p:`Initial` : :p:`inclined_wave` : :p:`wave_type`
:Summary: :s:`Specifies the type of wave to initialize.`
:Type:    :t:`string`
:Default: :d:`alfven`
:Scope:   :z:`Enzo`

:e:`Most waves are described in`
`Gardiner & Stone (2008) <http://adsabs.harvard.edu/abs/2008JCoPh.227.4123G>`_
:e:`. Valid wave types include:`

  * ``"alfven"`` :e:`A linear Alfven wave with perturbations to the
    magnetic field along the "x2"-axis.`
  * ``"circ_alfven"`` :e:`A traveling circularly polarized Alfven
    wave.`
  * ``"entropy"`` :e:`A linear MHD entropy wave.`
  * ``"fast"`` :e:`A linear fast magnetosonic wave.`
  * ``"slow"`` :e:`A linear slow magnetosonic wave.`
  * ``"sound"`` :e:`A linear sound wave (not from Gardiner & Stone
    2008) - Currently this sets the magnetic fields to zero.`

----

:Parameter:  :p:`Initial` : :p:`inclined_wave` : :p:`amplitude`
:Summary: :s:`Sets the amplitudes of the waves.`
:Type:    :t:`float`
:Default: :d:`1.e-6`
:Scope:   :z:`Enzo`

:e:`This must be a positive value. This has no effect for the circularly
polarized Alfven wave (for that case, amplitude is fixed at 0.1).`

----

:Parameter:  :p:`Initial` : :p:`inclined_wave` : :p:`lambda`
:Summary: :s:`The wavelength of the wave.`
:Type:    :t:`float`
:Default: :d:`1.`
:Scope:   :z:`Enzo`

:e:`This must be a positive value.`

----

:Parameter:  :p:`Initial` : :p:`inclined_wave` : :p:`positive_vel`
:Summary: :s:`Sets the sign of the wave speed.`
:Type:    :t:`logical`
:Default: :d:`true`
:Scope:   :z:`Enzo`

:e:`This has no effect for the circularly polarized Alfven wave.`


music
-----

The :p:`music` Initial subgroup is used to read block data from HDF5
files generated by MUSIC initial conditions generator.  Parameters are
used to specify the HDF5 files to read from, the names of the HDF5
datasets, what type of data the datasets contain (``"field"`` or
``"particle"``), field or particle names, and particle attributes.
Additionally, a :p:`coords` parameter is used to specify the axis
ordering used.  The :p:`music` group has its own :p:`list` parameter,
one for each field or particle type and attribute.

The following example reads the ``"density"`` field from ``"GridDensity"``
file, and the ``"dark"`` particle ``"position_x"`` attributes from the
``"ParticleDisplacements_x"`` file:

    ::

     Initial {

       list = ["music"];
       music {

          file_list = ["FD","PX"];
          FD {
            type      = "field";
	    name      = "density";
	    coords    = ".zyx";
	    file      = "GridDensity";
	    dataset   = "GridDensity";
	  }
          PX {
	    type      = "particle";
	    name      = "dark";
	    coords    = ".zyx";
	    attribute = "position_x";
	    file      = "ParticleDisplacements_x";
	    dataset   = "ParticleDisplacements_x";
	  }
       }
     }
  
:Parameter:  :p:`Initial` : :p:`music` : :p:`list`
:Summary: :s:`Name of the HDF5 to read from`
:Type:    :t:`string`
:Default: :d:`none`
:Scope:   :z:`Enzo`

:e:`List of file identifiers, one for each field or particle type+attribute.`

----

:Parameter:  :p:`Initial` : :p:`music` : :p:`<file>` : :p:`type`
:Summary: :s:`Type of data to read in`
:Type:    :t:`string`
:Default: :d:`none`
:Scope:   :z:`Enzo`

:e:`Type of data to read in, either "field" or "particle".`

----

:Parameter:  :p:`Initial` : :p:`music` : :p:`<file>` : :p:`file`
:Summary: :s:`Name of the HDF5 file to read from`
:Type:    :t:`string`
:Default: :d:`none`
:Scope:   :z:`Enzo`

:e:`Name of the HDF5 file to read from.`

----

:Parameter:  :p:`Initial` : :p:`music` : :p:`<file>` : :p:`dataset`
:Summary: :s:`Name of the dataset to read from the the HDF5 file`
:Type:    :t:`string`
:Default: :d:`none`
:Scope:   :z:`Enzo`

:e:`Name of the dataset to read from the the HDF5 file.`

----

:Parameter:  :p:`Initial` : :p:`music` : :p:`<file>` : :p:`name`
:Summary: :s:`Name of the field or particle type`
:Type:    :t:`string`
:Default: :d:`none`
:Scope:   :z:`Enzo`

:e:`Name of the field or particle type.`

----

:Parameter:  :p:`Initial` : :p:`music` : :p:`<file>` : :p:`attribute`
:Summary: :s:`Name of the particle attribute to initialize`
:Type:    :t:`string`
:Default: :d:`none`
:Scope:   :z:`Enzo`

:e:`Name of the particle attribute to initialize..`

----

:Parameter:  :p:`Initial` : :p:`music` : :p:`<file>` : :p:`coords`
:Summary: :s:`Ordering of axes in the HDF5 file`
:Type:    :t:`string`
:Default: :d:`"zyx"`
:Scope:   :z:`Enzo`

:e:`String defining the axis ordering of 'x', 'y', and 'z' in the HDF5 file.  For MUSIC initial conditions, which may have 4D datasets, "tzyx" can be used,  where "t" is ignored and can be any character other than 'x', 'y', or 'z'.`


sedov
-----

:Parameter:  :p:`Initial` : :p:`sedov` : :p:`array`
:Summary: :s:`Size of array of Sedov blasts`
:Type:    :t:`list` ( :t:`integer` )
:Default: :d:`[ 1, 1, 1 ]`
:Scope:   :z:`Enzo`

:e:`This parameter defines the size of the array of Sedov blast waves.  The default is a single blast.`

----

:Parameter:  :p:`Initial` : :p:`sedov` : :p:`radius_relative`
:Summary: :s:`Initial radius of the Sedov blast`
:Type:    :t:`float`
:Default: :d:`0.1`
:Scope:   Enzo  
:Todo:    :o:`write`

----

:Parameter:  :p:`Initial` : :p:`sedov` : :p:`pressure_in`
:Summary: :s:`Pressure inside the Sedov blast`
:Type:    :t:`float`
:Default: :d:`1.0`
:Scope:     Enzo  
:Todo:    :o:`write`

----

:Parameter:  :p:`Initial` : :p:`sedov` : :p:`pressure_out`
:Summary: :s:`Pressure outside the Sedov blast`
:Type:    :t:`float`
:Default: :d:`1.0e-5`
:Scope:     Enzo  
:Todo:    :o:`write`

----

:Parameter:  :p:`Initial` : :p:`sedov` : :p:`density`
:Summary: :s:`Density for the Sedov blast array problem`
:Type:    :t:`float`
:Default: :d:`1.0`
:Scope:     Enzo  
:Todo:    :o:`write`

shock_tube
----------

The :p:`shock_tube` Initial subgroup is used to setup axis-aligned
shock tube test problems for testing the VL + CT MHD integration
method.

Generically, a shock tube get's set up to evolve along an axis given by
the value of :p:`aligned_ax`. The discontinuity is always placed at
0.5 along that axis (typically the domain should extend from 0.0 to 1.0).

*This could be easily extended to setup additional shock tube setups,
and to be used to initial conditions for hydrodynamical methods or MHD
methods without face-centered B-fields*

:Parameter:  :p:`Initial` : :p:`shock_tube` : :p:`setup_name`
:Summary: :s:`Specifies the name of the shock tube problem to setup.`
:Type:    :t:`string`
:Default: :d:`none`
:Scope:   :z:`Enzo`

:e:`Valid shock tube problems include:`

  * ``"rj2a"`` :e:`An MHD shock tube problem illustrated in Figure 2a of`
    `Ryu & Jones (1995) <http://adsabs.harvard.edu/abs/1995ApJ...442..228R>`_
    :e:`. The initialization assumes that the adiabatic index is 5/3.`
  * ``"sod"`` :e:`The hydrodynamical Sod shock tube test problem. The
    canonical adiabatic is 1.4 (although this is not required).`

----

:Parameter:  :p:`Initial` : :p:`shock_tube` : :p:`aligned_ax`
:Summary: :s:`Specify the axis along which the shock tube evolves along.`
:Type:    :t:`string`
:Default: :d:`x`
:Scope:   :z:`Enzo`

:e:`Allowed values are` ``"x"`` :e:`,`  ``"y"`` :e:`, or` ``"z"`` :e:`.`

turbulence
----------

:Parameter:  :p:`Initial` : :p:`turbulence` : :p:`density`
:Summary: :s:`Initial density for turbulence initialization and method`
:Type:    :t:`float`
:Default: :d:`1.0`
:Scope:     Enzo  

:e:`Initial density for initializing the turbulence problem.`

----

:Parameter:  :p:`Initial` : :p:`turbulence` : :p:`pressure`

:Summary: :s:`Initial pressure for turbulence initialization and method`
:Type:    :t:`float`
:Default: :d:`0.0`
:Scope:     Enzo  

:e:`Initial pressure for initializing the turbulence problem.  Default is 0.0, meaning it is not used.  Either` `pressure` :e:`or` `temperature` :e:`should be defined, but not both.`

----

:Parameter:  :p:`Initial` : :p:`turbulence` : :p:`temperature`
:Summary: :s:`Initial temperature for turbulence initialization and method`
:Type:    :t:`float`
:Default: :d:`0.0`
:Scope:     Enzo  

:e:`Initial temperature for initializing the turbulence problem.  Default is 0.0, meaning it is not used.  Either` `pressure` :e:`or` `temperature` :e:`should be defined, but not both.`

vlct_bfield
-----------

This is used to compute the cell-centered magnetic field for the VL +
CT MHD method. This initializer can be utilized in 2 ways:

  1. Components of the vector potential (``"Ax"``, ``"Ay"``, ``"Az"``)
     can be specified as parameters of the subgroup (functions can be
     specified for each component in the same way as functions are
     specified for the :p:`value` subgroup. The initializer operates
     in this mode as long as the values for one of the components of
     the vector potential is specified (any unspecified components are
     assumed to be zero everywhere). In this mode, both the
     cell-centered and face-centered magnetic field values get
     specified.

  2. Initialize the cell-centered values of the magnetic fields after
     after another Initial subgroup (e.g. the :p:`value` subgroup) has
     already to specified the face-centered magnetic fields
     (``"bfieldi_x"``, ``"bfieldi_y"``, ``"bfieldi_z"``). The
     cell-centered value is just the average of the corresponding
     face-centered component. The initializer operates in this mode if
     none of the components of the vector potential have specified
     values. (To properly specify use this mode, specify
     ``"vlct_bfield"`` in the Initial:list parameter list following
     the name of the Initial subgroup used to setup the face-centered
     values.

In both modes, the option to update partially initialized
``"total_energy"`` fields with the specific magnetic energy computed
from the newly computed cell-centered bfields and pre-initialized
``"density"`` fields.

*It might be nice to eventually generalize this initializer to be able
to initialize cell-centered B-fields from vector potentials for MHD
integrators that don't require face-centered B-fields*

:Parameter:  :p:`Initial` : :p:`value` : :p:`update_etot` :
:Summary: :s:`update total energy with the initialized magnetic fields`
:Type:    :t:`logical`
:Default: :d:`false`
:Scope:     Enzo

:e:`If true, then the calculated cell-centered magnetic fields are
used to update the specific total energy. This requires that the`
``"total_energy"`` :e:`field has already been partially initialized
(it just doesn't include the specific magnetic energy), and that the`
``"density"`` :e:`field has been initialized.`


:Parameter:  :p:`Initial` : :p:`value` : :p:`Ax` :
:Summary: :s:`Expression for the x-component of the magnetic vector potential`
:Type:    :t:`list` ( :t:`float-expr`, [ :t:`logical-expr`, :t:`float-expr`, [ ... ] ] )
:Default: :d:`[]`
:Scope:     Enzo

:e:`This parameter allows for the direct specification of the x-component of
the magnetic vector potential (which will be used to compute magnetic fields).
The arguements for this parameter follow the same sets of rules as the
parameters of Initial:value. If this parameter is not specified, but the
values of the other components of the magnetic vector potential are, then
this component is assumed to be zero everywhere.`

:Parameter:  :p:`Initial` : :p:`value` : :p:`Ay` :
:Summary: :s:`Expression for the y-component of the magnetic vector potential`
:Type:    :t:`list` ( :t:`float-expr`, [ :t:`logical-expr`, :t:`float-expr`, [ ... ] ] )
:Default: :d:`[]`
:Scope:     Enzo

:e:`This parameter allows for the direct specification of the y-component of
the magnetic vector potential (which will be used to compute magnetic fields).
The arguements for this parameter follow the same sets of rules as the
parameters of Initial:value. If this parameter is not specified, but the
values of the other components of the magnetic vector potential are, then
this component is assumed to be zero everywhere.`

:Parameter:  :p:`Initial` : :p:`value` : :p:`Az` :
:Summary: :s:`Expression for the z-component of the magnetic vector potential`
:Type:    :t:`list` ( :t:`float-expr`, [ :t:`logical-expr`, :t:`float-expr`, [ ... ] ] )
:Default: :d:`[]`
:Scope:     Enzo

:e:`This parameter allows for the direct specification of the z-component of
the magnetic vector potential (which will be used to compute magnetic fields).
The arguements for this parameter follow the same sets of rules as the
parameters of Initial:value. If this parameter is not specified, but the
values of the other components of the magnetic vector potential are, then
this component is assumed to be zero everywhere.`