----

:Parameter:  :p:`Initial` : :p:`cycle`
:Summary: :s:`Initial cycle number`
:Type:    :t:`list` ( :t:`integer` )
:Default: :d:`0`
:Scope:     :c:`Cello`

:e:`Initial value for the cycle number.`

----

:Parameter:  :p:`Initial` : :p:`time`
:Summary: :s:`Initial time`
:Type:    :t:`float`
:Default: :d:`0.0`
:Scope:     :c:`Cello`

:e:`Initial time in code units.`

value
-----

:Parameter:  :p:`Initial` : :p:`value` : :p:`<field>` :
:Summary: :s:`Initialize field values`
:Type:    :t:`list` ( :t:`float-expr`, [ :t:`logical-expr`, :t:`float-expr`, [ ... ] ] )
:Default: :d:`[]`
:Scope:     Cello

:e:`This initialization approach allows initializing field values directly.  The first element of the list must be a` :t:`float` :e:`expression, and may include arithmetic operators, variables "x", "y", "z", and most functions in the POSIX math library /include/math.h.  The second optional list element is a logical expression, and  serves as a "mask" of the domain.  The third` :t:`float` :e:`expression parameter is required if a mask is supplied, and serves as the "else" case.  Multiple such mask-value pairs may be used.  For example:`

::

   Initial {

      list = ["value"];

      value {
         density = [ sin ( x + y ), x - y < 0.0, 1.0 ];
      }
   }
     
	       
:e:`is read as "Set the density field equal to` :p:`sin ( x + y )` :e:`wherever` :p:`x - y < 0.0` :e:`, otherwise set to` :p:`1.0` :e:`".`

inclined_wave
-------------

The :p:`inclined_wave` Initial subgroup is used to setup a MHD wave
at an angle inclined to the simulation domain for testing the VL
+ CT MHD integration method. Specifically, a coordinate system "x0",
"x1", "x2" is defined and the wave is initialized to travel along
"x0". The transformation from "x", "y", "z" to "x0", "x1", "x2", is
determined by the values of the :p:`alpha` and :p:`beta` parameters.

  1. Rotate the "x-y" plane is about the "z"-axis by the angle given
     by the product of negative one and :p:`beta` (per mathematical
     convention - rotation by a negative angle is clockwise
     rotation). The rotated "y"-axis now points along the "x1"-axis.
  2. Rotate the "z"-axis and the rotated "x"-axis by the angle given
     by the product of negative one and :p:`alpha`. Now the final
     rotated "x" and "z" axes point along the "x0" and "x2" axes.

This follows the procedure outlined in
`Gardiner and Stone (2008) <adsabs.harvard.edu/abs/2008JCoPh.227.4123G>`_ .
As in that paper, we initialize the magnetic fields using the vector
potential to ensure that the resulting magnetic fields have no
divergence.

**This could be easily extended to setup hydrodynamical waves and could
be generalized to setup waves for hydrodynamic methods or MHD methods
without face-centered B-fields**

:Parameter:  :p:`Initial` : :p:`inclined_wave` : :p:`alpha`
:Summary: :s:`Angle used to help determine wave inclination`
:Type:    :t:`float`
:Default: :d:`0`
:Scope:   :z:`Enzo`

:e:`The angle is assumed to have units of radians.`

----

:Parameter:  :p:`Initial` : :p:`inclined_wave` : :p:`beta`
:Summary: :s:`Angle used to help determine wave inclination`
:Type:    :t:`float`
:Default: :d:`0`
:Scope:   :z:`Enzo`

:e:`The angle is assumed to have units of radians.`

----

:Parameter:  :p:`Initial` : :p:`inclined_wave` : :p:`wave_type`
:Summary: :s:`Specifies the type of wave to initialize.`
:Type:    :t:`string`
:Default: :d:`alfven`
:Scope:   :z:`Enzo`

:e:`All waves are described in` `Gardiner and Stone (2008)
<adsabs.harvard.edu/abs/2008JCoPh.227.4123G>`_ :e:`. Valid wave types
include:`

  * ``"alfven"`` :e:`A linear Alfven wave with perturbations to the
    magnetic field along the "x2"-axis.`
  * ``"circ_alfven"`` :e:`A traveling circularly polarized Alfven
    wave.`
  * ``"entropy"`` :e:`A linear MHD entropy wave.`
  * ``"fast"`` :e:`A linear fast magnetosonic wave.`
  * ``"slow"`` :e:`A linear slow magnetosonic wave.`

----

:Parameter:  :p:`Initial` : :p:`inclined_wave` : :p:`amplitude`
:Summary: :s:`Sets the amplitudes of the waves.`
:Type:    :t:`float`
:Default: :d:`1.e-6`
:Scope:   :z:`Enzo`

:e:`This must be a positive value. This has no effect for the circularly
polarized Alfven wave (for that case, amplitude is fixed at 0.1).`

----

:Parameter:  :p:`Initial` : :p:`inclined_wave` : :p:`lambda`
:Summary: :s:`The wavelength of the wave.`
:Type:    :t:`float`
:Default: :d:`1.`
:Scope:   :z:`Enzo`

:e:`This must be a positive value.`

----

:Parameter:  :p:`Initial` : :p:`inclined_wave` : :p:`positive_vel`
:Summary: :s:`Sets the sign of the wave speed.`
:Type:    :t:`logical`
:Default: :d:`true`
:Scope:   :z:`Enzo`

:e:`This has no effect for the entropy wave or circularly polarized
Alfven wave.`


music
-----

The :p:`music` Initial subgroup is used to read block data from HDF5
files generated by MUSIC initial conditions generator.  Parameters are
used to specify the HDF5 files to read from, the names of the HDF5
datasets, what type of data the datasets contain (``"field"`` or
``"particle"``), field or particle names, and particle attributes.
Additionally, a :p:`coords` parameter is used to specify the axis
ordering used.  The :p:`music` group has its own :p:`list` parameter,
one for each field or particle type and attribute.

The following example reads the ``"density"`` field from ``"GridDensity"``
file, and the ``"dark"`` particle ``"position_x"`` attributes from the
``"ParticleDisplacements_x"`` file:

    ::

     Initial {

       list = ["music"];
       music {

          file_list = ["FD","PX"];
          FD {
            type      = "field";
	    name      = "density";
	    coords    = ".zyx";
	    file      = "GridDensity";
	    dataset   = "GridDensity";
	  }
          PX {
	    type      = "particle";
	    name      = "dark";
	    coords    = ".zyx";
	    attribute = "position_x";
	    file      = "ParticleDisplacements_x";
	    dataset   = "ParticleDisplacements_x";
	  }
       }
     }
  
:Parameter:  :p:`Initial` : :p:`music` : :p:`list`
:Summary: :s:`Name of the HDF5 to read from`
:Type:    :t:`string`
:Default: :d:`none`
:Scope:   :z:`Enzo`

:e:`List of file identifiers, one for each field or particle type+attribute.`

----

:Parameter:  :p:`Initial` : :p:`music` : :p:`<file>` : :p:`type`
:Summary: :s:`Type of data to read in`
:Type:    :t:`string`
:Default: :d:`none`
:Scope:   :z:`Enzo`

:e:`Type of data to read in, either "field" or "particle".`

----

:Parameter:  :p:`Initial` : :p:`music` : :p:`<file>` : :p:`file`
:Summary: :s:`Name of the HDF5 file to read from`
:Type:    :t:`string`
:Default: :d:`none`
:Scope:   :z:`Enzo`

:e:`Name of the HDF5 file to read from.`

----

:Parameter:  :p:`Initial` : :p:`music` : :p:`<file>` : :p:`dataset`
:Summary: :s:`Name of the dataset to read from the the HDF5 file`
:Type:    :t:`string`
:Default: :d:`none`
:Scope:   :z:`Enzo`

:e:`Name of the dataset to read from the the HDF5 file.`

----

:Parameter:  :p:`Initial` : :p:`music` : :p:`<file>` : :p:`name`
:Summary: :s:`Name of the field or particle type`
:Type:    :t:`string`
:Default: :d:`none`
:Scope:   :z:`Enzo`

:e:`Name of the field or particle type.`

----

:Parameter:  :p:`Initial` : :p:`music` : :p:`<file>` : :p:`attribute`
:Summary: :s:`Name of the particle attribute to initialize`
:Type:    :t:`string`
:Default: :d:`none`
:Scope:   :z:`Enzo`

:e:`Name of the particle attribute to initialize..`

----

:Parameter:  :p:`Initial` : :p:`music` : :p:`<file>` : :p:`coords`
:Summary: :s:`Ordering of axes in the HDF5 file`
:Type:    :t:`string`
:Default: :d:`"zyx"`
:Scope:   :z:`Enzo`

:e:`String defining the axis ordering of 'x', 'y', and 'z' in the HDF5 file.  For MUSIC initial conditions, which may have 4D datasets, "tzyx" can be used,  where "t" is ignored and can be any character other than 'x', 'y', or 'z'.`


sedov
-----

:Parameter:  :p:`Initial` : :p:`sedov` : :p:`array`
:Summary: :s:`Size of array of Sedov blasts`
:Type:    :t:`list` ( :t:`integer` )
:Default: :d:`[ 1, 1, 1 ]`
:Scope:   :z:`Enzo`

:e:`This parameter defines the size of the array of Sedov blast waves.  The default is a single blast.`

----

:Parameter:  :p:`Initial` : :p:`sedov` : :p:`radius_relative`
:Summary: :s:`Initial radius of the Sedov blast`
:Type:    :t:`float`
:Default: :d:`0.1`
:Scope:   Enzo  
:Todo:    :o:`write`

----

:Parameter:  :p:`Initial` : :p:`sedov` : :p:`pressure_in`
:Summary: :s:`Pressure inside the Sedov blast`
:Type:    :t:`float`
:Default: :d:`1.0`
:Scope:     Enzo  
:Todo:    :o:`write`

----

:Parameter:  :p:`Initial` : :p:`sedov` : :p:`pressure_out`
:Summary: :s:`Pressure outside the Sedov blast`
:Type:    :t:`float`
:Default: :d:`1.0e-5`
:Scope:     Enzo  
:Todo:    :o:`write`

----

:Parameter:  :p:`Initial` : :p:`sedov` : :p:`density`
:Summary: :s:`Density for the Sedov blast array problem`
:Type:    :t:`float`
:Default: :d:`1.0`
:Scope:     Enzo  
:Todo:    :o:`write`

shock_tube
----------

The :p:`shock_tube` Initial subgroup is used to setup axis-aligned
shock tube test problems for testing the VL + CT MHD integration
method.

Generically, a shock tube get's set up to evolve along an axis given by
the value of :p:`aligned_ax`. The discontinuity is always placed at
0.5 along that axis (typically the domain should extend from 0.0 to 1.0).

**This could be easily extended to setup additional shock tube setups,
and to be used to initial conditions for hydrodynamical methods or MHD
methods without face-centered B-fields**

:Parameter:  :p:`Initial` : :p:`shock_tube` : :p:`setup_name`
:Summary: :s:`Specifies the name of the shock tube problem to setup.`
:Type:    :t:`string`
:Default: :d:`none`
:Scope:   :z:`Enzo`

:e:`Valid shock tube problems include:`

  * ``"rj2a"`` :e:`An MHD shock tube problem illustrated in Figure 2a of`
    `Ryu and Jones (1995) <adsabs.harvard.edu/abs/1995ApJ...442..228R>`_
    :e:`. The initialization assumes that the adiabatic index is 5/3.`
  * ``"sod"`` :e:`The hydrodynamical Sod shock tube test problem. The
    canonical adiabatic is 1.4 (although this is not required).`

----

:Parameter:  :p:`Initial` : :p:`shock_tube` : :p:`aligned_ax`
:Summary: :s:`Specify the axis along which the shock tube evolves along.`
:Type:    :t:`string`
:Default: :d:`x`
:Scope:   :z:`Enzo`

:e:`Allowed values are` ``"x"`` :e:`, ` ``"y"`` :e:`, or ` ``"z"`` :e:`.`

turbulence
----------

:Parameter:  :p:`Initial` : :p:`turbulence` : :p:`density`
:Summary: :s:`Initial density for turbulence initialization and method`
:Type:    :t:`float`
:Default: :d:`1.0`
:Scope:     Enzo  

:e:`Initial density for initializing the turbulence problem.`

----

:Parameter:  :p:`Initial` : :p:`turbulence` : :p:`pressure`

:Summary: :s:`Initial pressure for turbulence initialization and method`
:Type:    :t:`float`
:Default: :d:`0.0`
:Scope:     Enzo  

:e:`Initial pressure for initializing the turbulence problem.  Default is 0.0, meaning it is not used.  Either` `pressure` :e:`or` `temperature` :e:`should be defined, but not both.`

----

:Parameter:  :p:`Initial` : :p:`turbulence` : :p:`temperature`
:Summary: :s:`Initial temperature for turbulence initialization and method`
:Type:    :t:`float`
:Default: :d:`0.0`
:Scope:     Enzo  

:e:`Initial temperature for initializing the turbulence problem.  Default is 0.0, meaning it is not used.  Either` `pressure` :e:`or` `temperature` :e:`should be defined, but not both.`

vlct_bfield
-----------

This is used to compute the cell-centered magnetic field for the VL +
CT MHD method after another Initial subgroup (e.g. the :p:`value`
subgroup) has already to specified the face-centered magnetic fields
(``"bfieldi_x"``, ``"bfieldi_y"``, ``"bfieldi_z"``). The cell-centered
value is just the average of the corresponding face-centered component.

To use this, specify ``"vlct_bfield"`` in the :p:`Initial` : :p:`list`
parameter following the name of Initial subgroup used to setup the
face-centered values.